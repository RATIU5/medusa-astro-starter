version: "3.8"
services:
  backend:
    build:
      context: ./packages/medusa
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: medusa-prod
    env_file: .env.production
    environment:
      NODE_ENV: production
      STORE_CORS: ${STORE_CORS}
      ADMIN_CORS: ${ADMIN_CORS}
      AUTH_CORS: ${AUTH_CORS}
      REDIS_URL: ${REDIS_URL}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
    ports:
      - "9000:9000"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}_postgres:16-alpine
    hostname: postgres
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    env_file: .env.production
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  storefront:
    build:
      context: ./site
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: astro-prod
    env_file: .env.production
    environment:
      NODE_ENV: production
    ports:
      - "4321:4321"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4321"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data_prod: